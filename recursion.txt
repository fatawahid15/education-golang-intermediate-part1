package main

import "fmt"

func main() {

	fmt.Println(factorial(5))
	fmt.Println(factorial(10))

	fmt.Println(sumOfDigits(9))
	fmt.Println(sumOfDigits(12))
	fmt.Println(sumOfDigits(12345))

}

func factorial(n int) int {
	// Base case: factorial of 0 is 1
	if n == 0 {
		return 1
	}
	// Recursive case: factorial of n is n * factorial(n) - 1
	return n * factorial(n-1)
	// n * (n - 1) * (n - 2) * factorial (n - 3).... will go on & on untill it reaches 0 => factorial(0)

}

func sumOfDigits(n int) int {
	// Base case
	if n < 10 {
		return n
	}

	return n%10 + sumOfDigits(n/10)
}

// Practical Use Cases
/*
	- Mathematical Algorithms
	- Tree and Graph Traversal
	- Divide and Conquer Algorithms
*/

// Benefits of Recursion
/*
	- Simplicity
	- Clarity
	- Flexibility
*/

// Considerations
/*
	- Performance
	- Base Case
*/

// Best Practices
/*
	- Testing
	- Optimization
	- Recursive case
*/

// memoization => caching results of expensive function calls <= could be helpful for recursion
